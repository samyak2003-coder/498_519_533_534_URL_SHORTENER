name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/url-shortener

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          provenance: true
          sbom: true

      - name: Start containers with Docker Compose
        run: |
          docker compose up -d
          sleep 10

      - name: Send test request to Flask app
        run: |
          curl -X POST http://localhost:5000/shorten \
          -H "Content-Type: application/json" \
          -d '{"long_url": "https://smashkarts.io"}'

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Start Minikube
        uses: medyagh/setup-minikube@latest

      - name: Verify Minikube Cluster
        run: kubectl get pods -A

      - name: Load Docker image into Minikube
        run: |
          minikube image load ${{ vars.DOCKER_USERNAME }}/url-shortener:latest

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f redis-deployment.yaml
          kubectl apply -f configmap.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f url-shortener-deployment.yaml
          kubectl apply -f ingress.yaml
          kubectl apply -f hpa.yaml

      - name: Enable ingress and metrics-server
        run: |
          minikube addons enable ingress
          minikube addons enable metrics-server

      - name: Wait for ingress controller
        run: |
          kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=120s

      - name: Port-forward the service
        run: |
          kubectl port-forward svc/url-shortener-service 8081:80 &

      - name: Test deployed app
        run: |
          curl -s -X POST http://localhost:8081/shorten \
          -H "Content-Type: application/json" \
          -d '{"long_url":"https://smashkarts.io"}'

  test:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test deployed app (send 100 POST requests)
        run: |
          # Start a background process to send requests
          for i in {1..100}; do
            curl -s -X POST http://localhost:8081/shorten \
            -H "Content-Type: application/json" \
            -d '{"long_url":"https://www.amazon.in/Daikin-Inverter-Display-Technology-MTKL50U/dp/B0BK1KS6ZD/?_encoding=UTF8&ref_=pd_hp_d_btf_ci_mcx_mr_ca_id_hp_d"}' &
            sleep 0.01
          done
          # Wait for all background jobs to finish
          wait

      - name: Check if all requests returned status 200
        run: |
          SUCCESS=true
          for i in {1..100}; do
            HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:8081/shorten \
            -H "Content-Type: application/json" \
            -d '{"long_url":"https://www.amazon.in/Daikin-Inverter-Display-Technology-MTKL50U/dp/B0BK1KS6ZD/?_encoding=UTF8&ref_=pd_hp_d_btf_ci_mcx_mr_ca_id_hp_d"}')
            
            if [[ "$HTTP_STATUS" != "200" ]]; then
              echo "Test failed for request $i: HTTP status is $HTTP_STATUS"
              SUCCESS=false
            fi
          done

          if [ "$SUCCESS" = false ]; then
            exit 1
          else
            echo "All tests passed: HTTP status 200 for all requests"
          fi
